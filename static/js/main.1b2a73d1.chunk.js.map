{"version":3,"sources":["components/titles.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","className","Form","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","titles","components_form","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b2a73d1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Titles = props => (\n\t<div>\n\t\t<h1 className=\"title-container__title\"> Weather Finder</h1>\n\t\t<p className=\"title-container__subtitle\">Find out weather condition and more anywhere...</p>\n\t</div>\n\t);\n\nexport default Titles;","import React from 'react';\n\nconst Form = props =>  (\n\t<form onSubmit={props.getWeather}>\n\t\t<input type='text' name='city'placeholder='City...'/>\n\t\t<input type='text' name='country'placeholder='Country...'/>\n\t\t<button>Get Weather</button>\n\t</form>\n);\n\nexport default Form;","import React from 'react';\n// Using something called a stateless functional components rather than a class based component because\n// Weather does not have any state, no need to import the class, then we cannot use the this keyword\n// and have to pass the props as argument.\n\nconst Weather = props => \n\t(\n\t\t<div className=\"weather__info\">\n\t\t\t{\n\t\t\t\tprops.city && props.country && <p className=\"weather__key\">Location: \n\t\t\t\t<span className=\"weather__value\"> {props.city}, {props.country} </span>\n\t\t\t\t</p>\n\t\t\t}\n\t\t\t{\n\t\t\t\tprops.temperature && <p className=\"weather__key\">Temperature: <span className=\"weather__value\"> {props.temperature} </span></p>\n\t\t\t}\n\t\t\t{\n\t\t\t\tprops.humidity &&  <p className=\"weather__key\">Humidity: <span className=\"weather__value\"> {props.humidity} </span></p>\n\t\t\t}\n\t\t\t{\n\t\t\t\tprops.description &&  <p className=\"weather__key\">Conditions: <span className=\"weather__value\"> {props.description} </span></p>\n\t\t\t}\n\t\t\t{\n\t\t\t\tprops.error && <p className=\"weather__error\">Error: {props.error} </p>\n\t\t\t}\n\t\t</div>\n\t);\n\nexport default Weather;","import React from 'react';\nimport Titles  from './components/titles'\nimport Form from './components/form'\nimport Weather from './components/weather'\n// Upto 41 min\nconst API_KEY = '6f551518ca05837d6e68777f9b8ff9b6';\n\nclass App extends React.Component {\n  state = {\n    temperature : undefined,\n    city : undefined,\n    country : undefined,\n    humidity : undefined,\n    description : undefined,\n    error : undefined\n  } // donot directly modify the state use buil in methods\n\n  getWeather = async (e) => {\n    e.preventDefault(); // event object SEARCH IT!!!\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&mode=json&appid=${API_KEY}`);\n    const data = await api_call.json();\n    if (city && country) {\n      // console.log(data);\n      this.setState ({\n        temperature : data.main.temp,\n        city : data.name,\n        country : data.sys.country,\n        humidity : data.main.humidity,\n        description : data.weather[0].description,\n        error : \"\"\n        });\n    }\n    else {\n      this.setState({\n      temperature : undefined,\n      city : undefined,\n      country : undefined,\n      humidity : undefined,\n      description : undefined,\n      error : \"--Please Enter City and Country--\"\n\n    });\n    }\n  }\n  render () {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\" >\n                  <Form getWeather={this.getWeather} />\n                      <Weather\n                       temperature={this.state.temperature}\n                       city = {this.state.city}\n                       country = {this.state.country}\n                       humidity = {this.state.humidity}\n                       description = {this.state.description}\n                       error = {this.state.error}\n                      />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>   \n    );\n  }\n};\n        export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}